name: 'Terraform'

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'terraform/**'
      - '.github/**'
      - 'app/**'
      - 'lambda/**'
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/**'
      - 'app/**'
      - 'lambda/**'

env:
  TF_VERSION: 1.1.4

jobs:
  terraform:
    runs-on: ubuntu-20.04
    steps:
      - name: Set env to development
        if: (github.ref == 'refs/heads/dev' && github.event_name == 'push') || (github.base_ref == 'dev' && github.event_name == 'pull_request')
        run: |
          cat >> $GITHUB_ENV <<EOF
          APP_URL=https://bcgov.github.io/sso-requests-dev
          API_URL=https://gcp9dahm4c.execute-api.ca-central-1.amazonaws.com/test/app
          APP_ENV=development
          ALLOW_SILVER=true
          ALLOW_GOLD=true
          TFC_WORKSPACE=xgr00q-dev-sso-requests
          SSO_ISSUER_URL=https://dev.loginproxy.gov.bc.ca/auth/realms/standard/.well-known/openid-configuration
          SUBNET_A=App_Dev_aza_net
          SUBNET_B=App_Dev_azb_net
          GITHUB_REPO=sso-terraform-dev
          KEYCLOAK_DEV_URL=https://sso-keycloak-1-b861c7-test.apps.silver.devops.gov.bc.ca
          KEYCLOAK_TEST_URL=https://sso-keycloak-2-b861c7-test.apps.silver.devops.gov.bc.ca
          KEYCLOAK_PROD_URL=https://sso-keycloak-3-b861c7-test.apps.silver.devops.gov.bc.ca
          KEYCLOAK_DEV_CLIENT_SECRET=${{ secrets.DEV_KEYCLOAK_DEV_CLIENT_SECRET }}
          KEYCLOAK_TEST_CLIENT_SECRET=${{ secrets.DEV_KEYCLOAK_TEST_CLIENT_SECRET }}
          KEYCLOAK_PROD_CLIENT_SECRET=${{ secrets.DEV_KEYCLOAK_PROD_CLIENT_SECRET }}
          KEYCLOAK_V2_DEV_URL=https://sso-keycloak-4-b861c7-test.apps.silver.devops.gov.bc.ca
          KEYCLOAK_V2_TEST_URL=https://sso-keycloak-5-b861c7-test.apps.silver.devops.gov.bc.ca
          KEYCLOAK_V2_PROD_URL=https://sso-keycloak-6-b861c7-test.apps.silver.devops.gov.bc.ca
          KEYCLOAK_V2_DEV_CLIENT_SECRET=${{ secrets.DEV_KEYCLOAK_V2_DEV_CLIENT_SECRET }}
          KEYCLOAK_V2_TEST_CLIENT_SECRET=${{ secrets.DEV_KEYCLOAK_V2_TEST_CLIENT_SECRET }}
          KEYCLOAK_V2_PROD_CLIENT_SECRET=${{ secrets.DEV_KEYCLOAK_V2_PROD_CLIENT_SECRET }}
          BCEID_WEBSERVICE_PROXY=${{ secrets.DEV_BCEID_WEBSERVICE_PROXY }}
          CHES_TOKEN_ENDPOINT=https://loginproxy.gov.bc.ca/auth/realms/comsvcauth/protocol/openid-connect/token
          CHES_API_ENDPOINT=https://ches.api.gov.bc.ca/api/v1/email
          CHES_USERNAME=${{secrets.CHES_USERNAME_PROD}}
          CHES_PASSWORD=${{secrets.CHES_PASSWORD_PROD}}
          VERIFY_USER_SECRET=${{secrets.VERIFY_USER_SECRET}}
          CUSTOM_DOMAIN_NAME=api-dev.loginproxy.gov.bc.ca
          EOF

      - name: Set env to production
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.base_ref == 'main' && github.event_name == 'pull_request')
        run: |
          cat >> $GITHUB_ENV <<EOF
          APP_URL=https://bcgov.github.io/sso-requests
          API_URL=https://kgodz1zmk2.execute-api.ca-central-1.amazonaws.com/test/app
          APP_ENV=production
          ALLOW_SILVER=true
          ALLOW_GOLD=true
          TFC_WORKSPACE=xgr00q-prod-sso-requests
          SSO_ISSUER_URL=https://loginproxy.gov.bc.ca/auth/realms/standard/.well-known/openid-configuration
          SUBNET_A=App_Prod_aza_net
          SUBNET_B=App_Prod_azb_net
          GITHUB_REPO=sso_terraform
          KEYCLOAK_DEV_URL=https://dev.oidc.gov.bc.ca
          KEYCLOAK_TEST_URL=https://test.oidc.gov.bc.ca
          KEYCLOAK_PROD_URL=https://oidc.gov.bc.ca
          KEYCLOAK_DEV_CLIENT_SECRET=${{ secrets.PROD_KEYCLOAK_DEV_CLIENT_SECRET }}
          KEYCLOAK_TEST_CLIENT_SECRET=${{ secrets.PROD_KEYCLOAK_TEST_CLIENT_SECRET }}
          KEYCLOAK_PROD_CLIENT_SECRET=${{ secrets.PROD_KEYCLOAK_PROD_CLIENT_SECRET }}
          KEYCLOAK_V2_DEV_URL=https://dev.loginproxy.gov.bc.ca
          KEYCLOAK_V2_TEST_URL=https://test.loginproxy.gov.bc.ca
          KEYCLOAK_V2_PROD_URL=https://loginproxy.gov.bc.ca
          KEYCLOAK_V2_DEV_CLIENT_SECRET=${{ secrets.PROD_KEYCLOAK_V2_DEV_CLIENT_SECRET }}
          KEYCLOAK_V2_TEST_CLIENT_SECRET=${{ secrets.PROD_KEYCLOAK_V2_TEST_CLIENT_SECRET }}
          KEYCLOAK_V2_PROD_CLIENT_SECRET=${{ secrets.PROD_KEYCLOAK_V2_PROD_CLIENT_SECRET }}
          BCEID_WEBSERVICE_PROXY=${{ secrets.PROD_BCEID_WEBSERVICE_PROXY }}
          CHES_TOKEN_ENDPOINT=https://loginproxy.gov.bc.ca/auth/realms/comsvcauth/protocol/openid-connect/token
          CHES_API_ENDPOINT=https://ches.api.gov.bc.ca/api/v1/email
          CHES_USERNAME=${{secrets.CHES_USERNAME_PROD}}
          CHES_PASSWORD=${{secrets.CHES_PASSWORD_PROD}}
          VERIFY_USER_SECRET=${{secrets.VERIFY_USER_SECRET}}
          CUSTOM_DOMAIN_NAME=api.loginproxy.gov.bc.ca
          EOF

      - uses: hmarr/debug-action@v2
      - uses: actions/checkout@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Cache Node dependencies
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies for frontend
        run: make app_install

      - name: Install dependencies for backend
        run: make server_install

      - name: Fetch OIDC discovery configuration
        id: discovery
        uses: bcgov/sso-requests-actions/actions/wellknown@v0.52.0
        with:
          discovery-url: ${{ env.SSO_ISSUER_URL }}
        continue-on-error: true

      - name: Save OIDC discovery configration as JSON
        run: |
          echo '${{ steps.discovery.outputs.config }}' > sso-configuration.json
        working-directory: ./lambda/app/src

      - name: Fetch OIDC discovery configuration - API
        id: discovery-api
        uses: bcgov/sso-requests-actions/actions/wellknown@v0.52.0
        with:
          discovery-url: ${{ env.KEYCLOAK_V2_PROD_URL }}/auth/realms/standard/.well-known/openid-configuration
        continue-on-error: true

      - name: Save OIDC discovery configration as JSON - API
        run: |
          echo '${{ steps.discovery-api.outputs.config }}' > api-sso-configuration.json
        working-directory: ./lambda/css-api/src

      - name: Build lambda artifacts
        run: |
          make build_all
        working-directory: ./lambda

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Create S3 Bucket in dev environment
        if: (github.ref == 'refs/heads/dev' && github.event_name == 'push') || (github.base_ref == 'dev' && github.event_name == 'pull_request')
        run: |
          cp env-resources.tf_dev env-resources.tf
        working-directory: ./terraform

      - name: Create S3 Bucket in prod environment
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.base_ref == 'main' && github.event_name == 'pull_request')
        run: |
          cp env-resources.tf_prod env-resources.tf
        working-directory: ./terraform

      - name: Terraform Variables
        run: |
          cat >"config.tf" <<EOF
          terraform {
            backend "remote" {
              hostname     = "app.terraform.io"
              organization = "bcgov"
              workspaces {
                name = "${{ env.TFC_WORKSPACE }}"
              }
            }
          }
          EOF

          cat >"provider.tf" <<EOF
          provider "aws" {
            region = "ca-central-1"
            assume_role {
              role_arn = "arn:aws:iam::\${var.target_aws_account_id}:role/BCGOV_\${var.target_env}_Automation_Admin_Role"
            }
          }
          EOF

          cat >"ci.auto.tfvars" <<EOF
          app_url="${{ env.APP_URL }}"
          api_url="${{ env.API_URL }}"
          app_env="${{ env.APP_ENV }}"
          allow_silver="${{ env.ALLOW_SILVER }}"
          allow_gold="${{ env.ALLOW_GOLD }}"
          gh_access_token="${{ secrets.GH_ACCESS_TOKEN }}"
          gh_secret="${{ secrets.GH_SECRET }}"
          sso_configuration_endpoint="${{ env.SSO_ISSUER_URL }}"
          subnet_a="${{ env.SUBNET_A }}"
          subnet_b="${{ env.SUBNET_B }}"
          gh_repo="${{ env.GITHUB_REPO }}"
          keycloak_dev_url="${{ env.KEYCLOAK_DEV_URL }}"
          keycloak_test_url="${{ env.KEYCLOAK_TEST_URL }}"
          keycloak_prod_url="${{ env.KEYCLOAK_PROD_URL }}"
          keycloak_dev_client_secret="${{ env.KEYCLOAK_DEV_CLIENT_SECRET }}"
          keycloak_test_client_secret="${{ env.KEYCLOAK_TEST_CLIENT_SECRET }}"
          keycloak_prod_client_secret="${{ env.KEYCLOAK_PROD_CLIENT_SECRET }}"
          keycloak_v2_dev_url="${{ env.KEYCLOAK_V2_DEV_URL }}"
          keycloak_v2_test_url="${{ env.KEYCLOAK_V2_TEST_URL }}"
          keycloak_v2_prod_url="${{ env.KEYCLOAK_V2_PROD_URL }}"
          keycloak_v2_dev_client_secret="${{ env.KEYCLOAK_V2_DEV_CLIENT_SECRET }}"
          keycloak_v2_test_client_secret="${{ env.KEYCLOAK_V2_TEST_CLIENT_SECRET }}"
          keycloak_v2_prod_client_secret="${{ env.KEYCLOAK_V2_PROD_CLIENT_SECRET }}"
          bceid_webservice_proxy="${{ env.BCEID_WEBSERVICE_PROXY }}"
          ches_username="${{ env.CHES_USERNAME }}"
          ches_password="${{ env.CHES_PASSWORD }}"
          ches_api_endpoint="${{ env.CHES_API_ENDPOINT }}"
          ches_token_endpoint="${{ env.CHES_TOKEN_ENDPOINT }}"
          custom_domain_name="${{ env.CUSTOM_DOMAIN_NAME }}"
          EOF

        working-directory: ./terraform

      - name: Terraform Init
        id: init
        run: terraform init -upgrade
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        working-directory: ./terraform
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./terraform
