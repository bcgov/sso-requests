name: Create and publish CSS App image

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'app/**'
      - 'Dockerfile'
      - 'db/**'
      - 'helm/**'
      - '.github/workflows/publish-image.yaml'

env:
  GITHUB_REGISTRY: ghcr.io
  IMAGE_NAME: bcgov/sso-requests

jobs:
  build-and-push-image:
    permissions: write-all
    runs-on: ubuntu-24.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: hmarr/debug-action@v3
      - name: Set env to development
        # if: (github.ref == 'refs/heads/dev' && github.event_name == 'push') || (github.base_ref == 'dev' && github.event_name == 'pull_request')
        run: |
          cat >> $GITHUB_ENV <<EOF
          API_AUTH_SECRET=${{ secrets.API_AUTH_SECRET }}
          GRAFANA_API_TOKEN=${{ secrets.DEV_GRAFANA_API_TOKEN }}
          KEYCLOAK_V2_DEV_URL=${{ secrets.DEV_KEYCLOAK_V2_DEV_URL }}
          KEYCLOAK_V2_TEST_URL=${{ secrets.DEV_KEYCLOAK_V2_TEST_URL }}
          KEYCLOAK_V2_PROD_URL=${{ secrets.DEV_KEYCLOAK_V2_PROD_URL }}
          KEYCLOAK_V2_DEV_USERNAME=${{ secrets.DEV_KEYCLOAK_V2_DEV_USERNAME }}
          KEYCLOAK_V2_DEV_PASSWORD=${{ secrets.DEV_KEYCLOAK_V2_DEV_PASSWORD }}
          KEYCLOAK_V2_TEST_USERNAME=${{ secrets.DEV_KEYCLOAK_V2_TEST_USERNAME }}
          KEYCLOAK_V2_TEST_PASSWORD=${{ secrets.DEV_KEYCLOAK_V2_TEST_PASSWORD }}
          KEYCLOAK_V2_PROD_USERNAME=${{ secrets.DEV_KEYCLOAK_V2_PROD_USERNAME }}
          KEYCLOAK_V2_PROD_PASSWORD=${{ secrets.DEV_KEYCLOAK_V2_PROD_PASSWORD }}
          CHES_USERNAME=${{secrets.CHES_USERNAME_PROD}}
          CHES_PASSWORD=${{secrets.CHES_PASSWORD_PROD}}
          VERIFY_USER_SECRET=${{secrets.VERIFY_USER_SECRET}}
          BCSC_INITIAL_ACCESS_TOKEN_DEV=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_SIT}}
          BCSC_INITIAL_ACCESS_TOKEN_TEST=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_SIT}}
          BCSC_INITIAL_ACCESS_TOKEN_PROD=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_SIT}}
          REDIS_HOST=${{secrets.DEV_REDIS_HOST}}

          EOF

      - name: Set env to test
        if: (github.ref == 'refs/heads/test' && github.event_name == 'push') || (github.base_ref == 'test' && github.event_name == 'pull_request')
        run: |
          cat >> $GITHUB_ENV <<EOF
          API_AUTH_SECRET=${{ secrets.API_AUTH_SECRET }}
          GRAFANA_API_TOKEN=${{ secrets.DEV_GRAFANA_API_TOKEN }}
          KEYCLOAK_V2_DEV_URL=${{ secrets.TEST_KEYCLOAK_V2_DEV_URL }}
          KEYCLOAK_V2_TEST_URL=${{ secrets.TEST_KEYCLOAK_V2_TEST_URL }}
          KEYCLOAK_V2_PROD_URL=${{ secrets.TEST_KEYCLOAK_V2_PROD_URL }}
          KEYCLOAK_V2_DEV_USERNAME=${{ secrets.TEST_KEYCLOAK_V2_DEV_USERNAME }}
          KEYCLOAK_V2_DEV_PASSWORD=${{ secrets.TEST_KEYCLOAK_V2_DEV_PASSWORD }}
          KEYCLOAK_V2_TEST_USERNAME=${{ secrets.TEST_KEYCLOAK_V2_TEST_USERNAME }}
          KEYCLOAK_V2_TEST_PASSWORD=${{ secrets.TEST_KEYCLOAK_V2_TEST_PASSWORD }}
          KEYCLOAK_V2_PROD_USERNAME=${{ secrets.TEST_KEYCLOAK_V2_PROD_USERNAME }}
          KEYCLOAK_V2_PROD_PASSWORD=${{ secrets.TEST_KEYCLOAK_V2_PROD_PASSWORD }}
          REALM_REGISTRY_API=${{ secrets.DEV_REALM_REGISTRY_API }}
          CHES_USERNAME=${{secrets.CHES_USERNAME_PROD}}
          CHES_PASSWORD=${{secrets.CHES_PASSWORD_PROD}}
          VERIFY_USER_SECRET=${{secrets.VERIFY_USER_SECRET}}
          BCSC_INITIAL_ACCESS_TOKEN_DEV=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_TEST}}
          BCSC_INITIAL_ACCESS_TOKEN_TEST=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_TEST}}
          BCSC_INITIAL_ACCESS_TOKEN_PROD=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_TEST}}
          REDIS_HOST=${{secrets.TEST_REDIS_HOST}}

          EOF

      - name: Set env to production
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.base_ref == 'main' && github.event_name == 'pull_request')
        run: |
          cat >> $GITHUB_ENV <<EOF
          API_AUTH_SECRET=${{ secrets.API_AUTH_SECRET }}
          GRAFANA_API_TOKEN=${{ secrets.PROD_GRAFANA_API_TOKEN }}
          KEYCLOAK_V2_DEV_URL=${{ secrets.PROD_KEYCLOAK_V2_DEV_URL }}
          KEYCLOAK_V2_TEST_URL=${{ secrets.PROD_KEYCLOAK_V2_TEST_URL }}
          KEYCLOAK_V2_PROD_URL=${{ secrets.PROD_KEYCLOAK_V2_PROD_URL }}
          KEYCLOAK_V2_DEV_USERNAME=${{ secrets.PROD_KEYCLOAK_V2_DEV_USERNAME }}
          KEYCLOAK_V2_DEV_PASSWORD=${{ secrets.PROD_KEYCLOAK_V2_DEV_PASSWORD }}
          KEYCLOAK_V2_TEST_USERNAME=${{ secrets.PROD_KEYCLOAK_V2_TEST_USERNAME }}
          KEYCLOAK_V2_TEST_PASSWORD=${{ secrets.PROD_KEYCLOAK_V2_TEST_PASSWORD }}
          KEYCLOAK_V2_PROD_USERNAME=${{ secrets.PROD_KEYCLOAK_V2_PROD_USERNAME }}
          KEYCLOAK_V2_PROD_PASSWORD=${{ secrets.PROD_KEYCLOAK_V2_PROD_PASSWORD }}
          CHES_USERNAME=${{secrets.CHES_USERNAME_PROD}}
          CHES_PASSWORD=${{secrets.CHES_PASSWORD_PROD}}
          VERIFY_USER_SECRET=${{secrets.VERIFY_USER_SECRET}}
          BCSC_INITIAL_ACCESS_TOKEN_DEV=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_TEST}}
          BCSC_INITIAL_ACCESS_TOKEN_TEST=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_TEST}}
          BCSC_INITIAL_ACCESS_TOKEN_PROD=${{secrets.BCSC_INITIAL_ACCESS_TOKEN_PROD}}
          REDIS_HOST=${{secrets.PROD_REDIS_HOST}}

          EOF
      - uses: actions/checkout@v4
      - name: Install CLI tools from OpenShift Mirror
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: mirror
          kam: latest
          oc: 4.18.7

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GITHUB_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        id: release
        uses: rymndhng/release-on-push-action@v0.28.0
        with:
          bump_version_scheme: 'patch'
          tag_prefix: 'v'
          use_github_release_notes: 'true'
          release_name: 'Release <RELEASE_VERSION>'
          max_commits: 100 # default is 50

      - id: get-tag
        name: Get Tag
        run: |
          echo "release_tag=${{ endsWith(github.ref, '/main') && steps.release.outputs.tag_name || steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ endsWith(github.ref, '/main') && format('{0}/{1}:{2}', env.GITHUB_REGISTRY, env.IMAGE_NAME, steps.release.outputs.tag_name) || steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Set env to development
        if: (github.ref == 'refs/heads/SSOTEAM-2108' && github.event_name == 'push')
        run: |
          cat >> $GITHUB_ENV <<EOF
          OPENSHIFT_TOKEN=${{ secrets.DEV_OPENSHIFT_TOKEN }}
          OPENSHIFT_NAMESPACE=${{ secrets.DEV_OPENSHIFT_NAMESPACE }}
          EOF

      - name: Set env to production
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: |
          cat >> $GITHUB_ENV <<EOF
          OPENSHIFT_TOKEN=${{ secrets.PROD_OPENSHIFT_TOKEN }}
          OPENSHIFT_NAMESPACE=${{ secrets.PROD_OPENSHIFT_NAMESPACE }}
          EOF

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          insecure_skip_tls_verify: true

      - name: Deploy app with Helm chart
        run: |
          namespace=${{ env.OPENSHIFT_NAMESPACE }}
          helm dep up
          helm upgrade --install --atomic sso-requests . -n ${namespace} \
          -f values.yaml -f "values-${namespace}.yaml" \
          --set image.tag="dev" \
          --set envVars.apiAuthSecret="${{ env.API_AUTH_SECRET }}" \
          --set envVars.keycloakV2DevUsername="${{ env.KEYCLOAK_V2_DEV_USERNAME }}" \
          --set envVars.keycloakV2DevPassword="${{ env.KEYCLOAK_V2_DEV_PASSWORD }}" \
          --set envVars.keycloakV2ProdUsername="${{ env.KEYCLOAK_V2_PROD_USERNAME }}" \
          --set envVars.keycloakV2ProdPassword="${{ env.KEYCLOAK_V2_PROD_PASSWORD }}" \
          --set envVars.keycloakV2TestUsername="${{ env.KEYCLOAK_V2_TEST_USERNAME }}" \
          --set envVars.keycloakV2TestPassword="${{ env.KEYCLOAK_V2_TEST_PASSWORD }}" \
          --set envVars.chesUsername="${{ env.CHES_USERNAME }}" \
          --set envVars.chesPassword="${{ env.CHES_PASSWORD }}" \
          --set envVars.grafanaApiToken="${{ env.GRAFANA_API_TOKEN }}" \
          --set envVars.msGraphApiAuthority="${{ secrets.MS_GRAPH_API_AUTHORITY }}" \
          --set envVars.msGraphApiClientId="${{ secrets.MS_GRAPH_API_CLIENT_ID }}" \
          --set envVars.msGraphApiClientSecret="${{ secrets.MS_GRAPH_API_CLIENT_SECRET }}" \
          --set envVars.bcscInitialAccessTokenDev="${{ env.BCSC_INITIAL_ACCESS_TOKEN_DEV }}" \
          --set envVars.bcscInitialAccessTokenProd="${{ env.BCSC_INITIAL_ACCESS_TOKEN_PROD }}" \
          --set envVars.bcscInitialAccessTokenTest="${{ env.BCSC_INITIAL_ACCESS_TOKEN_TEST }}" \
          --set envVars.redisHost="${{ env.REDIS_HOST }}" \
          --set envVars.ghAccessToken="${{ secrets.GH_ACCESS_TOKEN }}" \
          --set envVars.verifyUserSecret="${{ env.VERIFY_USER_SECRET }}" \
          --set envVars.rc_webhook_url="${{ secrets.RC_SSO_OPS_WEBHOOK }}" \
          --set envVars.keycloakV2DevUrl="${{ env.KEYCLOAK_V2_DEV_URL }}" \
          --set envVars.keycloakV2TestUrl="${{ env.KEYCLOAK_V2_TEST_URL }}" \
          --set envVars.keycloakV2ProdUrl="${{ env.KEYCLOAK_V2_PROD_URL }}"
        working-directory: ./helm
